/*
* Generated on <%= (new Date).toISOString().split('T')[0] %>
* <%= pkg.name %> v<%= pkg.version %>
* <%= pkg.homepage %>
*
* Copyright (c) <%= (new Date).getFullYear() %> <%= pkg.author.name %>
* Licensed under the MIT license.
*/

'use strict';

/*
* PERFORMANCE
*
* 1. For performance reasons you should only matching one level down, if possible.
* 2. Try to keep your watch task clean. Do NOT watch everything (like icons).
*
*/

const config = require('./configs/config');
const gulp = require('gulp');
const runSequence = require('gulp-sequence');
const requireDir = require('require-dir');
const dir = requireDir(config.options.paths.tasks);

<% if (taskRunner && taskRunner.indexOf('grunt') !== -1) { %>
require('gulp-grunt')(gulp); // add all the gruntfile tasks to gulp<% } %>
// Default task
gulp.task('default', function () {
	gulp.start('serve');
});

/**
 * Static Server
 */
gulp.task('serve', [
	'sassGlobbing:dev',
	'styles:dev'<% if (templateEngine && templateEngine.indexOf('mangony') !== -1) { %>,
	'mangony:dev'<% } %><% if (gulpModules && gulpModules.indexOf('browserify') !== -1) { %>,
	'js:dev',
	'js:watch'<% } %>
	], function () {
	<% if (templateEngine && templateEngine.indexOf('mangony') === -1) { %>
	config.server({
		server: config.options.paths.dev
	});
	<% } %>
	// SCSS
	gulp.watch([
			config.options.paths.src + "/shared/**/*.scss"
		], [
		'styles:dev'<% if (testAndQALibs && testAndQALibs.indexOf('stylelint') !== -1) { %>,
		'stylelint'<% } %>
	]);
	<% if (gulpModules && gulpModules.indexOf('gulp-requirejs-optimize') !== -1) { %>
	// JS
	gulp.watch([
		config.options.paths.src + "/shared/scripts/**/*.js",
		config.options.paths.src + "/shared/scripts/**/*.html"
	], ['js:dev']);
	<% } %>
	// Reload
	gulp.watch([
		config.options.paths.dev + "/*.html",
		config.options.paths.dev + "/scripts/**/*.js",
		config.options.paths.dev + "/css/*.css"
	]).on('change', config.server.reload);
});

/**
 * Build Task
 */
gulp.task('build', function(callback) {
	runSequence(
		'clean:dev',
		[
			'copy:assets',
			'copy:ajax'
		],
		'sassGlobbing:dist',<% if (templateEngine && templateEngine.indexOf('mangony') !== -1) { %>
		'mangony:dist',<% } %>
		[
			'styles:dist'<% if (gulpModules && (gulpModules.indexOf('gulp-requirejs-optimize') !== -1 || gulpModules.indexOf('browserify') !== -1)) { %>,
			'js:dist'<% } else { %>,
			'copy:js'<% } %>
		],<% if (testAndQALibs) { %>
		[<% if(testAndQALibs.indexOf('hintingHTML') !== -1) { %>
			'hint:html'<% } %><% if (testAndQALibs.indexOf('hintingJS') !== -1) { %>,
			'hint:js'<% } %><% if (testAndQALibs.indexOf('jscs') !== -1) { %>,
			'js:jscs'<% } %>
		],<% } %><% if (docs && docs.length) { %>
		[<% if(docs.indexOf('jsdoc') !== -1) { %>
			'docs:js'<% } %><% if (testAndQALibs.indexOf('sassdoc') !== -1) { %>,
			'docs:sass'<% } %>
		],<% } %>
		callback
	);
});
<% if (features && features.indexOf('createDevFolder') != -1) { %>
/**
 * Dist Task
 */
gulp.task('dist', ['build'], function(cb) {
	runSequence(
		'clean:dist',
		'copy:dist',
		cb
	);
});<% } %>