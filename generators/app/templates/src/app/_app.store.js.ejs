import { routerMiddleware, connectRouter } from 'connected-react-router';
import { createBrowserHistory } from 'history';
import Immutable from 'immutable';
import { createStore, applyMiddleware } from 'redux';
import { composeWithDevTools } from 'redux-devtools-extension';
import { combineReducers } from 'redux-immutable';<% if (jsLibs.indexOf('rxjs') !== -1) { %>
import { combineEpics, createEpicMiddleware } from 'redux-observable';<% } %>
import { composeWithDevTools } from 'redux-devtools-extension';

/**
 * Global Stuff
 */
const composeEnhancers = composeWithDevTools({
	// Specify here name, actionsBlacklist, actionsCreators and other options if needed
});

// Enable Browser History (you can also use 'createHashHistory()'
const history = createBrowserHistory();

/**
 * Declare the epic middleware
 * @type {EpicMiddleware}
 */
const epicMiddleware = createEpicMiddleware();
/**
 * Initial State
 */
const INITIAL_STATE = Immutable.Map();<% if (jsLibs.indexOf('rxjs') !== -1) { %>

/**
 * Epics (Async handling with redux-observables and RxJS)
 */
export const ROOT_EPIC = combineEpics(
	// i18nFetchEpic
);<% } %>

/**
 * Reducer
 */
const ROOT_REDUCER = combineReducers({
	// i18n: i18nReducer,
	// ui: uiReducer,
	router: connectRouter(history)
});

/**
 * Store creation
 */
let store = createStore(
	ROOT_REDUCER,
	INITIAL_STATE,
	composeEnhancers(
		applyMiddleware(<% if (jsLibs.indexOf('rxjs') !== -1) { %>
			epicMiddleware,<% } %>
			routerMiddleware(history)
		)
	)
);

/**
 * Inject the middleware epics
 */
epicMiddleware.run(ROOT_EPIC);

// Export store as singleton
export default store;

// Export further objects like history
export { history };
