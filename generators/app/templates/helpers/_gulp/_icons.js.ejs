'use strict';

const config = require('../config');
const path = config.options.paths;
const gulp = require('gulp');<% if (gulpModules && gulpModules.indexOf('gulp-iconify') !== -1) { %>
const icons = require('gulp-iconify'); <% } %><% if (gulpModules && gulpModules.indexOf('gulp-svg-sprite') !== -1) { %>
const sprite = require('gulp-svg-sprite'); <% } %>

// Basic configuration
var options = {<% if (gulpModules && gulpModules.indexOf('gulp-svg-sprite') !== -1) { %>
	sprite: {
		shape: {
			spacing: {
				padding: 5
			}
		},
		mode: {
			css: {
				bust: false,
				sprite: path.src + '/assets/img/sprites/sprite.svg',
				render: {
					scss: {
						dest: path.src + '/scss/icons/sprite.scss'
					}
				}
			}
		}
	}<% if (gulpModules && gulpModules.indexOf('gulp-iconify') !== -1) { %>,<% } %><% } %><% if (gulpModules && gulpModules.indexOf('gulp-iconify') !== -1) { %>
	icons: {
		src: path.src + '/assets/img/svg/icons/**/*.svg',
		pngOutput: path.src + '/assets/img/png/icons/',
		scssOutput: path.src + '/scss/icons',
		cssOutput: false,
		styleTemplate: path.helpers + '/templates/iconify/stylesheet.hbs',
		svgoOptions: {
			enabled: true,
			options: {
				plugins: [
					{removeUnknownsAndDefaults: false},
					{mergePaths: false}
				]
			}
		}
	}<% } %>
};
<% if (gulpModules && gulpModules.indexOf('gulp-iconify') !== -1) { %>
// Data URIs
gulp.task('icons', function () {
	icons(options.icons);
});<% } %>
<% if (gulpModules && gulpModules.indexOf('gulp-svg-sprite') !== -1) { %>
// Sprite generation
gulp.task('sprites', function () {
	return gulp.src(path.src + '/assets/img/svg/icons/**/*.svg')
		.pipe(sprite(options.sprite))
		.pipe(gulp.dest(path.src));
});<% } %>