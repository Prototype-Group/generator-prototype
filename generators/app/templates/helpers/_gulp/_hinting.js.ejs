'use strict';

const config = require('../config');
const path = config.options.paths;
const gulp = require('gulp');
const htmlhint = require('gulp-htmlhint');<% if (testAndQALibs && testAndQALibs.indexOf('hintingJS') !== -1) { %>
const jshint = require('gulp-jshint');
const stylish = require('jshint-stylish');<% } %><% if (testAndQALibs && testAndQALibs.indexOf('stylelint') !== -1) { %>
const stylelint = require('gulp-stylelint');<% } %>

// HTML Hinting Task
gulp.task('hint:html', function () {
	return gulp.src(path.dev + '/*.html')
		.pipe(htmlhint('../task-configs/.htmlhintrc'))
		.pipe(htmlhint.reporter());
});
<% if (testAndQALibs && testAndQALibs.indexOf('hintingJS') !== -1) { %>
// JS Hinting Task
gulp.task('hint:js', function () {
	return gulp.src(path.src + '/js/**/*.js')
		.pipe(jshint('../task-configs/.jshintrc'))
		.pipe(jshint.reporter(stylish));
});<% } %>
<% if (testAndQALibs && testAndQALibs.indexOf('stylelint') !== -1) { %>
// Stylelint Task
gulp.task('stylelint', function () {
	return gulp
		.src([
			'!' + path.src + '/scss/styles.tmp.scss',
			path.src + '/scss/**/*.scss'
		])
		.pipe(stylelint({
			configFile: path.helpers + '/task-configs/stylelint.config.js',
			format: 'scss',
			reporters: [
				{
					formatter: 'string',
					console: true
				}
			]
		}));
});<% } %>