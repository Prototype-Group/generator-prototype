'use strict';

const config = require('../config');
const path = config.options.paths;
const gulp = require('gulp');
const size = require('gulp-filesize');<% if (gulpModules && gulpModules.indexOf('gulp-htmlmin') !== -1) { %>
const htmlmin = require('gulp-htmlmin');<% } %><% if (templateEngine && templateEngine.indexOf('mangony') !== -1) { %>
const deepExtend = require('deep-extend');
const Mangony = require('mangony');
let mangonyOptions = {
	allow: {
		YFMContextData: true,
		YFMLayout: true
	},
	collections: [
		'sitemap',
		'type'
	],
	cwd: config.options.paths.src + '/',
	dest: config.options.paths.dev,
	exportData: false,
	flatten: true,
	types: {
		data: {
		dir: '',
		files: [
			'store/**/*.json',
			'shared/components/**/*.hjson',
			'shared/utilities/**/*.hjson',
			'containers/**/*.hjson'
		]
		},
		partials: {
		dir: '',
		files: [
			'shared/components/**/*.hbs',
			'shared/utilities/**/*.hbs',
			'containers/**/*.hbs'
		]
		},
		pages: {
		dir: '',
		files: [
			'containers/pages/**/*.hbs'
		]
		},
		layouts: {
		dir: 'shared/layouts',
		files: [
			'**/*.hbs'
		]
		}
	},
	helpers: [
		'shared/utilities/template-helpers/*.js'
	]
};
let mangonyDevOptions = deepExtend(Object.assign({}, mangonyOptions), {
	compileStaticFiles: false,
	devServer: {
		start: true,
		injectScript: false,
		port: config.options.ports.server,
		bsOptions: {
			proxy: 'localhost:' + config.options.ports.server,
			port: config.options.ports.app,
			files: [
				config.options.paths.dev + '/**/*.html',
				config.options.paths.dev + '/css/**/*.css',
				config.options.paths.dev + '/scripts/**/*.js'
			]
		}
	},
	watch: true
});

let mangonyDistOptions = deepExtend(Object.assign({}, mangonyOptions), {
	watch: false
});


// Globbing task with watcher
gulp.task('mangony:dev', function () {
	var mangonyServer = new Mangony(mangonyDevOptions);
	mangonyServer.render();
});

// Globbing task without watcher
gulp.task('mangony:dist', function () {
	var mangonyCompiler = new Mangony(mangonyDistOptions);
	mangonyCompiler.render();
});
<% } %>
<% if (gulpModules && gulpModules.indexOf('gulp-htmlmin') !== -1) { %>
// Minify HTML
gulp.task('html:min', function () {
	return gulp.src(path.dev + '/*.html')
		.pipe(htmlmin({
			removeComments: false,
			collapseWhitespace: true
		}))
		.pipe(gulp.dest(path.dev))
		.pipe(size());
});
<% } %>